{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js","logo.jpg"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","key","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.67eb13f2.chunk.js","sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames'\r\nimport Moment from 'react-moment'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission: <span className={classNames({ 'text-success': launch_success, 'text-danger':!launch_success})}>{mission_name}</span> </h4>\r\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-info\">Launch Details</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LaunchItem\r\n","import React from 'react'\r\n\r\nfunction MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\"></span> Sucess\r\n              \r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\"></span> Failure\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MissionKey\r\n","import React from 'react'\r\nimport { useQuery, gql } from '@apollo/client'\r\nimport LaunchItem from './LaunchItem'\r\nimport MissionKey from './MissionKey'\r\n\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LanuchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`\r\n\r\n\r\nfunction Launches() {\r\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY)\r\n\r\n    if(loading) return <h4>Loading...</h4>\r\n    \r\n    if(error) console.log(error)\r\n    return (\r\n        <>\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <MissionKey />\r\n        {\r\n            data.launches.map(launch => <LaunchItem key={launch.flight_number} launch={launch} />)\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Launches\r\n\r\n","import React from 'react'\r\nimport { useQuery, gql } from '@apollo/client'\r\nimport { Link } from 'react-router-dom'\r\nimport classNames from 'classnames'\r\n\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number:Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            launch_date_local\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nfunction Launch(props) {\r\n\r\n    let { flight_number } = props.match.params\r\n    flight_number = parseInt(flight_number)\r\n\r\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {variables : { flight_number }})\r\n\r\n    if(loading) return <h4>Loading...</h4>\r\n    \r\n    if(error) console.log(error)\r\n    \r\n    const { mission_name, launch_year, launch_success, rocket: { rocket_id, rocket_name, rocket_type}} = data.launch\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission: </span>{mission_name}</h1>\r\n            <h4 className=\"mb-3\">Launch Details</h4>\r\n            <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n                <li className=\"list-group-item\">Launch Success: <span className={classNames({\r\n                    'text-success':launch_success,\r\n                    'text-danger': !launch_success\r\n                })}>{launch_success ? 'YES': 'NO'}</span></li>\r\n            </ul>\r\n            <h4 className=\"my-3\">Rocket Details</h4>\r\n            <ul className=\"list-group\">\r\n               <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n               <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n               <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n            </ul>\r\n            <hr/>\r\n            <Link to=\"/\" className=\"btn btn-primary mb-2\">Back</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Launch\r\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport './App.css'\nimport logo from './logo.jpg'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n  \n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: '300px', display: 'block', margin: 'auto' }} />\n          <Switch>\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.1a0538ee.jpg\";"],"sourceRoot":""}